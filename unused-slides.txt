======================================
Slides removed due to time constraints
======================================

To get it down to 40 minutes
============================

----

2009: Docbook 5
---------------

::

   <?xml version="1.0" encoding="UTF-8"?>
   <book xml:id="simple_book" xmlns="http://docbook.org/ns/docbook" version="5.0">
     <title>Very simple book</title>
     <chapter xml:id="chapter_1">
       <title>Chapter 1</title>
       <para>Hello world!</para>
       <para>I hope that your day is proceeding <emphasis>splendidly</emphasis>!</para>
     </chapter>
     <chapter xml:id="chapter_2">
       <title>Chapter 2</title>
       <para>Hello again, world!</para>
     </chapter>
   </book>

.. note:: **skippable** Docbook 5

   Example from wikipedia (for Docbook 5, which is relatively recent).

   DocBook 5 is an XML language, formally defined by a RELAX NG schema with
   integrated Schematron rules.
 
----

1994: POD
---------

::

  =pod

  =head1 DESCRIPTION

  This is not I<really> representative of POD usage.

  =over 2

  =item This is a list item.

  =item This is another list item.

  =back

  =cut

.. note:: 1994 POD *Presentational*. Still in use today.

  Perl's "Plain Old Documentation".

  Same year as wikiwikiweb

  An example of markup to a specific purpose, and clearly very successful.

  Note that the blank lines are required around the POD commands.

  I don't think you can do multi-paragraph list items. The POD definitions
  contains ambuguities, although how to handle some of them is explained in
  the POD documentation.

----

1995: Javadoc
-------------

::

  /**
   * Short one line description.
   * <p>
   * Longer description. If there were any, it would be here.
   * <p>
   * And even more explanations to follow in consecutive
   * paragraphs separated by HTML paragraph breaks.
   *
   * @param  variable Description text text text.
   * @return Description text text text.
   */
  public int methodName (...) {
      // ...
  }

.. note::  **skippable** javadoc

  1995 javadoc *Presentational*. Still in use today.

  Has never specified the subset of HTML it allows.

----
 
To get it down to (maybe) 25 minutes
====================================

If 26 slides took 40 minutes, then that's about 1-and-a-half slides per
minute, and 25 minutes suggests 16 slides. Which is going to be interesting to
do, as it means dropping 10 slides. And not talking longer per slide to make
up for it(!).

----

Digital Standard Runoff
-----------------------

::

    .TITLE A simpler DSR example
    .CHAPTER This is a chapter

    This is the first paragraph.
    .LIST
    .LIST ELEMENT;This is a list element. We have *bold\* and &underline\&.
    .LIST ELEMENT;This is another list element. I like interrobangs ?%!
    .END LIST

.. note:: **skippable** DSR

  This is an example using Digital Standard Runoff (DSR), which I
  used to use in the 1980s/90s on VMS.

  Abbreviated forms are also available, e.g., ``.ls`` instead of
  ``.list``, and ``.le;`` instead of ``list element;``.

----

1969: GML and 1986: SGML
------------------------

::

  <td> The Implication of SGML for the Preparation of Scientific Publications
  <au> Joan M. Smith
  <ad>
  <al> National Computing Centre, Oxford Road, Manchester M1 7ED
  <ab> The &SGML (SGML) is a draft international standard for publishing.
  ...
  <h1>Introduction
  <p> The official title of SGML, currently, is ISO/DIS 8879,
  <ci> Information Processing &end Text and Office Systems &end &SGML (SGML)
  </ci>. <ref> ISO/DIS 8879 <ci> Information Processing &end Text and Office
  Systems &end &SGML (SGML). ISO, Geneva (1985). </ref>
  ...
  <p>There are several points worthy of note here:
  <ul>
  <li> the normal publishing delay with ISO standards...
  ...
  </ul>


.. note:: 1969 GML, 1986 SGML *Semantic* and *"meta"* (DTDs)

  GML (Charles Goldfarb, Edward Mosher, Raymond Lorie) at IBM. 

  [Standard] Generalised Markup Language.

  The example is actually SGML. It is transcribed from Figure 3 of the
  paper named. The ellipses are mine.

  The GML starter set was a set of macros for IBM Script.

  A mechanism for *describing* markup languages. Use of the DTD.

  Sensibly, SGML came with a "starter set" drafted by Joan Smith and
  Janet Vandore.

  Note how SGML allowed the
  definition of elements that were implicitly closed by another element -
  e.g., <li> and <p>

  - <td> is the document title
  - <ad> is an address, <al> an address line
  - <ab> is the abstract
  - <ci> indicates a citation, which rendered as italics in the resulting paper.
  - <ref> marks up a Reference, collected for the section at the end of the document.
  - &SGML is an "entity reference" that expands to 'Standard Generalized
    Markup Language' - we're familiar with things like &eacute; from HTML.

----

SGML: document declares its DOCTYPE
-----------------------------------

::

  <!DOCTYPE html>
  <html>
    <head>
      <title>This is a title</title>
    </head>
    <body>
      <p>Hello world!</p>
    </body>
  </html>

.. note:: **skippable** Using a DTD

  DOCTYPE = Documentation Type Declaration

  A document can use a DOCTYPE to say what DTD it is conforming to.

----

1990: groff
-----------

::

  ..INCLUDE  mission-statement-strings.mom
  .TITLE    "\*[Groff-Mission-Statement]
  .SUBTITLE "\*[2014]
  .INCLUDE  mission-statement-style.mom
  .PP
  As the most widely deployed implementation of troff in use today,
  groff holds an important place in the Unix universe.  Frequently
  and erroneously dismissed as a legacy program for formatting
  Unix manuals (manpages), groff is in fact a sophisticated system
  for producing high-quality typeset material, from business
  correspondence to complex, technical reports and plate-ready books.
  \*[BU3]With an impressive record for backward compatibility, it
  continues to evolve and play a leading role in the development of
  free typesetting software.

.. note:: **skippable** groff

  1990 groff

  Some example groff (GNU troff) code.

  Whilst the roff family are not strictly speaking programmable as
  such, their use of macros (originally m4?) means that in practice they are
  as capable as systems such as |TeX| (although I don't think that DSLs like
  |LaTeX| exist as-such).

----

1983: |LaTeX|
-------------

::

  \begin{center}
  \rule{5in}{0.1mm}
  \end{center}

  \section*{Captain Competent strikes again}

  The superhero is a familiar concept in comics, science fiction and many other
  fields. However, I am more interested in what might be called `the competent
  hero'. This is a subtler form of protagonist---a person who has attained
  {\em competence} in their daily life.

.. note:: |LaTeX| is essentially a DSL written in |TeX|. It's probably still
   the best known, but certainly not the only one.

   I used to write plain |TeX|, but most people actually use |LaTeX|,
   which dates from about 1983/1984, or one of the other systems written in
   |TeX|.

.. note:: 1983 |LaTeX| *Presentational*. Still in use.

  Leslie Lamport.

  Most people use |LaTeX| (or one of the equivalents) instead of directly
  using |TeX|.

----

1991: setext
------------

::

  Why setext?
  -----------

    I agree that FAQ's would best be written in something like setext_.
    Why?  Because this document is written in setext and it includes
    the ability to embed HTML hypertext links without being obnoxious.

    As you can see it's easy to write setext documents, and as Edward
    pointed out, it uses existing text conventions for **bold** and _italic_
    words and titles.

  .. _setext http://www.bsdi.com/setext/
  ..

.. note:: 1991 setext *Presentational*. Lightweight.

  Ian Feldman, for use in writing the TidBITs electronic newsletter.

  Excerpted from a document called "Why setext".

  Partly a reaction to SGML. Clearly influential on
  all of the succeeding lightweight markups.

  Same year as HTML

----

----

.. vim: set filetype=rst tabstop=8 softtabstop=2 shiftwidth=2 expandtab:
